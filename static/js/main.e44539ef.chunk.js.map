{"version":3,"sources":["useWebSocket.ts","WebSocketHandler.tsx","App.tsx","index.tsx"],"names":["useWebsocket","settings","useState","setReconnectTmsp","useImmer","status","state","setState","socketRef","useRef","setReconnectTmspDebounced","debounce","timestamp","handleOpenEvent","console","info","draft","handleCloseEvent","Date","handleErrorEvent","e","error","String","useEffect","window","current","close","wsUrl","URL","wsEndpoint","protocol","securityToken","search","WebSocket","addEventListener","err","removeEventListener","WebSocketHandler","message","setMessage","decodeMessage","msg","uint8Array","Uint8Array","JSON","parse","decodedArray","decode","TextDecoder","Error","handleReceivedMessage","ev","a","data","log","App","params","URLSearchParams","location","get","setSecurityToken","apiEndpoint","setAPIEndpoint","address","setAddress","getHeaders","isPost","headers","Headers","set","btoa","loadAddress","fetch","then","res","json","catch","account","hoprAddress","sendMessage","method","body","stringify","recipient","name","placeholder","value","onChange","target","onClick","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.e44539ef.chunk.js","sourcesContent":["/*\n  A react hook.\n  Keeps websocket connection alive, reconnects on disconnections or endpoint change.\n*/\nimport { useImmer } from \"use-immer\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { debounce } from \"debounce\";\n\nexport type ConnectionStatus = \"CONNECTED\" | \"DISCONNECTED\";\nexport type Settings = {\n  wsEndpoint: string;\n  securityToken?: string;\n};\n\nconst useWebsocket = (settings: Settings) => {\n  // update timestamp when you want to reconnect to the websocket\n  const [reconnectTmsp, setReconnectTmsp] = useState<number>();\n  const [state, setState] = useImmer<{\n    status: ConnectionStatus;\n    error?: string;\n  }>({ status: \"DISCONNECTED\" });\n\n  const socketRef = useRef<WebSocket>();\n\n  const setReconnectTmspDebounced = debounce((timestamp: number) => {\n    setReconnectTmsp(timestamp);\n  }, 1e3);\n\n  const handleOpenEvent = () => {\n    console.info(\"WS CONNECTED\");\n    setState((draft) => {\n      draft.status = \"CONNECTED\";\n      return draft;\n    });\n  };\n\n  const handleCloseEvent = () => {\n    console.info(\"WS DISCONNECTED\");\n    setState((draft) => {\n      draft.status = \"DISCONNECTED\";\n      return draft;\n    });\n    setReconnectTmspDebounced(+new Date());\n  };\n\n  const handleErrorEvent = (e: Event) => {\n    console.error(\"WS ERROR\", e);\n    setState((draft) => {\n      draft.status = \"DISCONNECTED\";\n      draft.error = String(e);\n    });\n    setReconnectTmspDebounced(+new Date());\n  };\n\n  // runs everytime \"endpoint\" or \"reconnectTmsp\" changes\n  useEffect(() => {\n    if (typeof window === \"undefined\") return; // We are on SSR\n\n    // disconnect from previous connection\n    if (socketRef.current) {\n      console.info(\"WS Disconnecting..\");\n      socketRef.current.close(1000, \"Shutting down\");\n    }\n\n    // need to set the token in the query parameters, to enable websocket authentication\n    try {\n      const wsUrl = new URL(settings.wsEndpoint);\n      wsUrl.protocol = wsUrl.protocol === 'https:' ? 'wss' : 'ws'\n\n      if (settings.securityToken) {\n        wsUrl.search = `?apiToken=${settings.securityToken}`;\n      }\n      console.info(\"WS Connecting..\");\n      socketRef.current = new WebSocket(wsUrl);\n\n      // handle connection opening\n      socketRef.current.addEventListener(\"open\", handleOpenEvent);\n      // handle connection closing\n      socketRef.current.addEventListener(\"close\", handleCloseEvent);\n      // handle errors\n      socketRef.current.addEventListener(\"error\", handleErrorEvent);\n    } catch (err) {\n      console.error(\"URL is invalid\", settings.wsEndpoint);\n    }\n\n    // cleanup when unmounting\n    return () => {\n      if (!socketRef.current) return;\n\n      socketRef.current.removeEventListener(\"open\", handleOpenEvent);\n      socketRef.current.removeEventListener(\"close\", handleCloseEvent);\n      socketRef.current.removeEventListener(\"error\", handleErrorEvent);\n    };\n  }, [settings.wsEndpoint, settings.securityToken]);\n\n  return {\n    state,\n    socketRef\n  };\n};\n\nexport default useWebsocket;\n","import React, { useEffect, useState } from \"react\";\nimport useWebsocket from \"./useWebSocket\";\nimport { decode } from 'rlp'\nexport const WebSocketHandler: React.FC<{\n  wsEndpoint: string;\n  securityToken: string;\n}> = ({ wsEndpoint, securityToken }): JSX.Element => {\n  const [message, setMessage] = useState(\"\");\n  const websocket = useWebsocket({ wsEndpoint, securityToken });\n  const { socketRef } = websocket;\n\n  const decodeMessage =  (msg:string): string => {\n    let uint8Array = new Uint8Array(JSON.parse(`[${msg}]`));    \n    let decodedArray = decode(uint8Array)\n    if (decodedArray[0] instanceof Uint8Array) {\n      return new TextDecoder().decode(decodedArray[0])\n    }\n    throw Error(`Could not decode received message: ${msg}`)\n  }\n\n  const handleReceivedMessage = async (ev: MessageEvent<string>) => {\n    try {\n      const data = decodeMessage(ev.data)\n      console.log(\"WebSocket Data: \", data);\n      setMessage(data);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  useEffect(() => {\n    if (!socketRef.current) return;\n    socketRef.current.addEventListener(\"message\", handleReceivedMessage);\n\n    return () => {\n      if (!socketRef.current) return;\n      socketRef.current.removeEventListener(\"message\", handleReceivedMessage);\n    };\n  }, [socketRef.current]);\n\n  return <span>{message ? message : \"You have no messages.\"}</span>;\n};\n\nexport default WebSocketHandler;\n","import { ChangeEvent, useEffect, useState } from \"react\";\nimport WebSocketHandler from \"./WebSocketHandler\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const params = new URLSearchParams(window.location.search)\n  \n  const [message, setMessage] = useState(\"Hello world\");\n  const [securityToken, setSecurityToken] = useState(params.get('apiToken') || '');\n  const [apiEndpoint, setAPIEndpoint] = useState(params.get('apiEndpoint') || 'http://localhost:3001');\n  const [address, setAddress] = useState(\"\");\n\n  const getHeaders = (isPost = false) => {\n    const headers = new Headers();\n    if (isPost) {\n      headers.set(\"Content-Type\", \"application/json\");\n      headers.set(\"Accept-Content\", \"application/json\");\n    }\n    headers.set(\"Authorization\", \"Basic \" + btoa(securityToken));\n    return headers;\n  };\n\n  useEffect(() => {\n    const loadAddress = async () => {\n      const headers = getHeaders();\n      const account = await fetch(`${apiEndpoint}/api/v2/account/addresses`, {\n        headers\n      })\n        .then((res) => res.json())\n        .catch((err) => console.error(err));\n      setAddress(account?.hoprAddress);\n    };\n    loadAddress();\n  }, [securityToken, apiEndpoint]);\n\n  const sendMessage = async () => {\n    if (!address) return;\n    await fetch(`${apiEndpoint}/api/v2/messages`, {\n      method: \"POST\",\n      headers: getHeaders(true),\n      body: JSON.stringify({\n        recipient: address,\n        body: message\n      })\n    }).catch((err) => console.error(err));\n  };\n\n  return (\n    <div>\n      <div>\n        <label>API Endpoint</label>{\" \"}\n        <input\n          name=\"apiEndpoint\"\n          placeholder={apiEndpoint}\n          value={apiEndpoint}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setAPIEndpoint(e.target.value)\n          }\n        />\n      </div>\n      <div>\n        <label>Security Token</label>{\" \"}\n        <input\n          name=\"securityToken\"\n          placeholder={securityToken}\n          value={securityToken}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setSecurityToken(e.target.value)\n          }\n        />\n      </div>\n      <div>\n        <label>Send a message</label>{\" \"}\n        <input\n          name=\"message\"\n          value={message}\n          placeholder={message}\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\n            setMessage(e.target.value)\n          }\n        />\n      </div>\n      <button onClick={() => sendMessage()}>Send message to node</button>\n      <br />\n      <br />\n      <WebSocketHandler wsEndpoint={`${apiEndpoint}/api/v2/messages/websocket`} securityToken={securityToken} />\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}